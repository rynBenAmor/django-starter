#this is a starter Nginx configuration file for a Django project with security and performance optimizations (edit as needed).
# it should exist in /etc/nginx/sites-available/myproject.conf
# and be symlinked to /etc/nginx/sites-enabled/myproject.conf
# also, can edit /etc/nginx/nginx.conf for global settings

# to create the symlink:

# sudo nano /etc/nginx/sites-available/myproject (no extension) then paste the code below (minus the certbot section)
# sudo apt install certbot
# sudo apt install certbot python3-certbot-nginx
# sudo certbot --nginx -d yourdomain.com -d www.yourdomain.com
# sudo nginx -t && sudo systemctl reload nginx


# *** ---  Nginx Configuration for Django Project --- ****

# --- HTTPS Server Block ---
server {
    # --- Domain Names ---
    server_name yourdomain.com www.yourdomain.com;

    # --- Project Base Directory ---
    set $base /path/to/project;

    # set a bad bot variable
    set $bad_bot 0;

    # --- Logging ---
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    # --- Security Headers ---
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()" always;
    # add_header Content-Security-Policy "..."; # Uncomment and customize as needed

    # --- Host Restriction ---
    if ($host !~ ^(yourdomain\.com|www\.yourdomain\.com)$) {
        return 400;
    }

    # --- Restrict HTTP Methods ---
    if ($request_method !~ ^(GET|POST)$) {
        return 405;
    }

    # --- Favicon ---
    location = /favicon.ico {
        access_log off;
        log_not_found off;
        alias $base/path/to/favicon.ico;
    }

    # --- robots.txt ---
    location = /robots.txt {
        log_not_found off;
        alias $base/path/to/robots.txt;
    }

    # --- Static Files ---
    location /static/ {
        alias $base/staticfiles/;
        autoindex off;
        expires 7d;
        add_header Cache-Control "public, max-age=604800, immutable";
        etag off;
        access_log off;
    }

    # --- Media Files ---
    location /media/ {
        alias $base/media/;
        access_log off;
        autoindex off;
        expires 30d;
        add_header Cache-Control "public, max-age=2592000";
    }

    # --- Pass sitemap.xml to backend ---
    location = /sitemap.xml {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # --- Block Suspicious User-Agents ---    

    if ($http_user_agent ~* (masscan|python|curl|wget|libwww|scan|nmap|nikto|fuzzer|scrapy|httpclient|Go-http-client|perl|ruby|php|^$)) {
        set $bad_bot 1;
    }

    # WHITELIST SOCIAL MEDIA BOTS
    if ($http_user_agent ~* (Googlebot|Bingbot|LinkedInBot|Slackbot|Twitterbot|facebookexternalhit|WhatsApp|TelegramBot|Pinterest)) {
        set $bad_bot 0;
    }

    if ($bad_bot = 1) {
        return 403;
    }


    # --- Block Exploit Attempts ---
    location ~* (eval\()|(union.*select)|(base64_) {
        return 403;
    }

    # --- Block Common Masscan Directories ---
    location ~* ^/(api|admin|config|src|storage|wordpress|public|tmp|aws|s3)[/]? {
        return 404;
        access_log /var/log/nginx/blocked_requests.log;
    }

    # --- Block Double Extensions ---
    location ~* \.(tar|sql|bak|backup|db|log|data|old|root|archive|dump|site|wwwroot|media|forum|customers|orders|home|test|auth|engine|php|mysql|joomla|bbs|bin|store|public|src|tmp|config|aws|s3|local|clients|users|index|new|jsp|settings|ini|lock|dump|db|sqlite|mdb|yml|json|xml|php|sql|tar|zip|rar|tgz|war|jar)\.(gz|tgz|bz2|xz|zip|rar|7z)$ {
        return 404;
        access_log /var/log/nginx/blocked_requests.log;
    }

    # --- Block Dotfiles ---
    location ~* ^/\. {
        return 404;
        access_log /var/log/nginx/blocked_requests.log;
    }

    # --- Block Dangerous/Backup/Config Files ---
    location ~* \.(git|svn|env|bak|backup|old|swp|log|dat|pem|key|crt|csr|settings|ini|lock|aws|dump|db|sqlite|mdb|yml|json|xml|php|sql|tar|tar\.gz|tar\.bz2|tar\.xz|zip|7z|rar|tgz|war|jar)[/]?$ {
        return 404;
        access_log /var/log/nginx/blocked_requests.log;
    }

    # --- Main Proxy to Backend ---
    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_connect_timeout 30s;
        proxy_read_timeout 30s;
        proxy_send_timeout 30s;
        # proxy_redirect ... # Uncomment and adjust if needed
    }

    # --- SSL Settings (Certbot Example, automated but can add the http2 manually) ---
    listen 443 ssl http2;
    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}

# --- HTTP Redirect to HTTPS ---
server {
    listen 80;
    server_name yourdomain.com www.yourdomain.com;

    if ($host = www.yourdomain.com) {
        return 301 https://$host$request_uri;
    }
    if ($host = yourdomain.com) {
        return 301 https://$host$request_uri;
    }

    return 404;
}